import React, { useState } from "react";

export default function ChainageBuilder() {
  const [structure, setStructure] = useState("");
  const [responseType, setResponseType] = useState("");
  const [selectedAction, setSelectedAction] = useState("");
  const [customAction, setCustomAction] = useState("");
  const [msc, setMsc] = useState("");
  const [customIncidence, setCustomIncidence] = useState("");
  const [customPerceived, setCustomPerceived] = useState(false);
  const [customRealized, setCustomRealized] = useState(false);
  const [selectedIncidences, setSelectedIncidences] = useState([]);
  const [chainages, setChainages] = useState([]);
  const [expandedIndex, setExpandedIndex] = useState(null);
  const [structureCount, setStructureCount] = useState({});
  const [adminMode, setAdminMode] = useState(false);
  const [adminPass, setAdminPass] = useState("");

  const actionGroups = {
    "Structuration / organisation": [
      "Cr√©er un comit√© de pilotage",
      "Clarifier les r√¥les",
      "Formaliser une strat√©gie",
      "D√©finir un plan d‚Äôaction",
      "Instaurer un r√®glement interne"
    ],
    "Formation / comp√©tences": [
      "Organiser une formation",
      "Mettre en place du tutorat",
      "Partager des ressources",
      "Mettre en ≈ìuvre un atelier pratique",
      "Encourager l‚Äôautoformation"
    ],
    "Engagement individuel / initiative": [
      "Lancer une action personnelle",
      "Porter un plaidoyer",
      "Mobiliser son r√©seau",
      "Animer un atelier",
      "Repr√©senter l‚Äôorganisation"
    ],
    "Ouverture externe / coop√©ration": [
      "Rejoindre un collectif",
      "Initier un partenariat",
      "Organiser un √©v√©nement avec d'autres",
      "Participer √† une r√©union institutionnelle",
      "Communiquer √† l‚Äôext√©rieur"
    ],
    "R√©ajustement / adaptation": [
      "R√©orienter une action",
      "R√©agir √† une crise",
      "Modifier un outil en place",
      "Tester une nouvelle m√©thode",
      "R√©organiser une activit√©"
    ],
    "Valorisation / capitalisation": [
      "√âcrire un guide",
      "Partager une exp√©rience",
      "Cr√©er un support de communication",
      "Documenter une pratique",
      "Accompagner une autre structure"
    ],
    "Autre": []
  };

  const mscList = [
    "1. Gouvernance interne",
    "2. Professionnalisation des √©quipes",
    "3. R√©seautage et coop√©rations",
    "4. Plaidoyer par l‚Äôaction",
    "5. Leadership individuel",
    "6. Structuration strat√©gique et √©conomique",
    "7. Innovation organisationnelle",
    "8. Apprentissage et adaptation",
    "9. Capitalisation et transmission"
  ];

  const officialIncidences = [
    "Am√©lioration des r√©sultats de projets",
    "Renforcement de l‚Äô√©quipe",
    "L√©gitimit√© accrue",
    "Mobilisation des membres",
    "Impact territorial renforc√©"
  ];
  
  const fetchFromGoogleSheet = async () => {
    const url = "https://script.google.com/macros/s/AKfycbz9zjxV6Y8p-37u0FP000EMFMgoPs4z2rXwPfoER1RdkTv4hhVliXDyqFA_0ScyCMcn/exec";
    try {
      const response = await fetch(url);
      const data = await response.json();
      if (Array.isArray(data)) {
        setChainages(data);
      }
    } catch (err) {
      console.error("Erreur lors du chargement des donn√©es Google Sheets", err);
    }
  };


  const toggleIncidence = (name, type) => {
    setSelectedIncidences(prev => {
      const existing = prev.find(i => i.name === name);
      if (existing) {
        return prev.map(i =>
          i.name === name ? { ...i, [type]: !i[type] } : i
        );
      } else {
        return [...prev, { name, perceived: type === "perceived", realized: type === "realized" }];
      }
    });
  };

  const isChecked = (name, type) => {
    const item = selectedIncidences.find(i => i.name === name);
    return item ? item[type] : false;
  };

  const handleAddAction = () => {
    if (customAction.trim()) {
      actionGroups["Autre"].push(customAction.trim());
      setSelectedAction(customAction.trim());
      setCustomAction("");
    }
  };

  const sendToGoogleSheet = async (chainage) => {
    const url = "https://script.google.com/macros/s/AKfycbz9zjxV6Y8p-37u0FP000EMFMgoPs4z2rXwPfoER1RdkTv4hhVliXDyqFA_0ScyCMcn/exec";
    try {
      await fetch(url, {
        method: "POST",
        mode: "no-cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(chainage)
      });
    } catch (err) {
      console.error("Erreur Google Sheets", err);
    }
  };

  const handleAddChainage = () => {
    const incidences = [...selectedIncidences];

    // üîÑ Ajout de l'incidence personnalis√©e si coch√©e
    if (customIncidence && (customPerceived || customRealized)) {
      incidences.push({
        name: customIncidence,
        perceived: customPerceived,
        realized: customRealized
      });
    }

    if (!responseType || !selectedAction || !msc || incidences.length === 0) {
      alert("Merci de remplir tous les champs obligatoires.");
      return;
    }

    const prefix = structure.trim().toUpperCase() || "RESP";
    const count = (structureCount[prefix] || 0) + 1;
    const label = `${prefix}${count}`;
    setStructureCount(prev => ({ ...prev, [prefix]: count }));

    const newChainage = {
      label,
      structure: prefix,
      responseType,
      action: selectedAction,
      msc,
      incidences
    };

    setChainages(prev => [...prev, newChainage]);
    sendToGoogleSheet(newChainage);

    // R√©initialisation compl√®te
    setStructure("");
    setResponseType("");
    setSelectedAction("");
    setCustomAction("");
    setMsc("");
    setCustomIncidence("");
    setCustomPerceived(false);
    setCustomRealized(false);
    setSelectedIncidences([]);
    setExpandedIndex(null);
  };

  
  const handleAdminLogin = () => {
    if (adminPass === "pcpa2025") {
      setAdminMode(true);
      fetchFromGoogleSheet();  // Ajout ici
    } else {
      alert("Mot de passe incorrect.");
    }
    setAdminPass("");
  };


  const handleExportCSV = () => {
    const rows = chainages.map(c => {
      const per√ßues = c.incidences.filter(x => x.perceived).map(x => x.name).join(" | ");
      const r√©alis√©es = c.incidences.filter(x => x.realized).map(x => x.name).join(" | ");
      return {
        Code: c.label,
        Structure: c.structure,
        Type: c.responseType,
        Action: c.action,
        MSC: c.msc,
        "Incidences per√ßues": per√ßues,
        "Incidences r√©alis√©es": r√©alis√©es
      };
    });

    const headers = Object.keys(rows[0]);
    const csv = [
      headers.join(","),
      ...rows.map(row => headers.map(h => `"${row[h] || ""}"`).join(","))
    ].join("\n");

    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "chainages_pcpa.csv";
    link.click();
  };
  return (
    <div className="p-6 space-y-4 text-sm max-w-4xl mx-auto">

      {!adminMode && (
        <div className="bg-blue-50 p-4 rounded">
          <label className="block text-sm mb-1">Acc√®s administrateur :</label>
          <input
            type="password"
            className="border p-1 mr-2"
            value={adminPass}
            onChange={(e) => setAdminPass(e.target.value)}
          />
          <button
            onClick={handleAdminLogin}
            className="bg-blue-600 text-white px-2 py-1 rounded"
          >
            Valider
          </button>
        </div>
      )}

      <h2 className="text-lg font-semibold">Cha√Ænage Action ‚û°Ô∏è MSC ‚û°Ô∏è Incidences</h2>

      <input
        className="border p-2 w-full"
        placeholder="Nom de la structure (facultatif)"
        value={structure}
        onChange={(e) => setStructure(e.target.value)}
      />

      <select
        className="border p-2 w-full"
        value={responseType}
        onChange={(e) => setResponseType(e.target.value)}
      >
        <option value="">-- Type de r√©ponse --</option>
        <option value="Individuelle">Individuelle</option>
        <option value="Collective">Collective</option>
      </select>

      <select
        className="border p-2 w-full"
        value={selectedAction}
        onChange={(e) => setSelectedAction(e.target.value)}
      >
        <option value="">-- S√©lectionner une action --</option>
        {Object.entries(actionGroups).map(([groupe, actions]) => (
          <optgroup key={groupe} label={groupe}>
            {actions.map((action, idx) => (
              <option key={idx} value={action}>{action}</option>
            ))}
          </optgroup>
        ))}
      </select>

      <div className="flex items-center gap-2">
        <input
          className="border p-2 w-full"
          placeholder="Nouvelle action"
          value={customAction}
          onChange={(e) => setCustomAction(e.target.value)}
        />
        <button
          onClick={handleAddAction}
          className="bg-gray-600 text-white px-3 py-1 rounded"
        >
          Ajouter
        </button>
      </div>

      <select
        className="border p-2 w-full"
        value={msc}
        onChange={(e) => setMsc(e.target.value)}
      >
        <option value="">-- S√©lectionner un MSC --</option>
        {mscList.map((m, i) => (
          <option key={i} value={m}>{m}</option>
        ))}
      </select>

      <h3 className="font-semibold mt-4">Incidences per√ßues / r√©alis√©es</h3>
      {officialIncidences.map((inc, idx) => (
        <div key={idx} className="flex gap-4 items-center py-1">
          <span className="w-1/2">{inc}</span>
          <label><input type="checkbox" checked={isChecked(inc, 'perceived')} onChange={() => toggleIncidence(inc, 'perceived')} /> üîÑ Per√ßue</label>
          <label><input type="checkbox" checked={isChecked(inc, 'realized')} onChange={() => toggleIncidence(inc, 'realized')} /> ‚úÖ R√©alis√©e</label>
        </div>
      ))}

      <div className="pt-3 space-y-1">
        <label>Ajouter une incidence personnalis√©e :</label>
        <input
          className="border p-2 w-full"
          placeholder="Nom de l'incidence"
          value={customIncidence}
          onChange={(e) => setCustomIncidence(e.target.value)}
        />
        <div className="flex gap-4 mt-1">
          <label><input type="checkbox" checked={customPerceived} onChange={() => setCustomPerceived(!customPerceived)} /> üîÑ Per√ßue</label>
          <label><input type="checkbox" checked={customRealized} onChange={() => setCustomRealized(!customRealized)} /> ‚úÖ R√©alis√©e</label>
        </div>
      </div>

      <button
        onClick={handleAddChainage}
        className="bg-green-600 text-white mt-4 px-4 py-2 rounded"
      >
        ‚ûï Ajouter
      </button>
    {chainages.length > 0 && (
      <div className="mt-8 space-y-2">
        <h3 className="font-semibold text-md">Cha√Ænages enregistr√©s</h3>

        <div className="text-sm text-gray-600">
          <span>üîÑ : incidence per√ßue</span> &nbsp;&nbsp;
          <span>‚úÖ : incidence r√©alis√©e</span>
        </div>

        <table className="w-full mt-2 border text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="border px-2">Code</th>
              <th className="border px-2">Structure</th>
              <th className="border px-2">Type</th>
              <th className="border px-2">Action</th>
              <th className="border px-2">MSC</th>
              <th className="border px-2">üîÑ Per√ßues</th>
              <th className="border px-2">‚úÖ R√©alis√©es</th>
            </tr>
          </thead>
          <tbody>
            {chainages.map((c, i) => {
              const per√ßues = c.incidences.filter(x => x.perceived).map(x => x.name);
              const r√©alis√©es = c.incidences.filter(x => x.realized).map(x => x.name);

              return (
                <React.Fragment key={i}>
                  <tr
                    className="cursor-pointer hover:bg-gray-100"
                    onClick={() => setExpandedIndex(i === expandedIndex ? null : i)}
                  >
                    <td className="border px-2">{c.label}</td>
                    <td className="border px-2">{c.structure}</td>
                    <td className="border px-2">{c.responseType}</td>
                    <td className="border px-2">{c.action}</td>
                    <td className="border px-2">{c.msc}</td>
                    <td className="border px-2">{per√ßues.join(", ")}</td>
                    <td className="border px-2">{r√©alis√©es.join(", ")}</td>
                  </tr>

                  {expandedIndex === i && (
                    <tr className="bg-blue-50">
                      <td colSpan={7} className="p-4">
                        <div className="flex flex-col items-start space-y-1">
                          <div><strong>{c.action}</strong> ‚û°Ô∏è</div>
                          <div className="ml-4">{c.msc} ‚û°Ô∏è</div>
                          <div className="ml-8">
                            ‚úÖ <strong>R√©alis√©es :</strong> {r√©alis√©es.join(" | ") || "Aucune"}
                          </div>
                          <div className="ml-8">
                            üîÑ <strong>Per√ßues :</strong> {per√ßues.join(" | ") || "Aucune"}
                          </div>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              );
            })}
          </tbody>
        </table>

        {adminMode && (
          <button
            className="bg-gray-800 text-white mt-4 px-4 py-2 rounded"
            onClick={handleExportCSV}
          >
            üìÅ Exporter CSV
          </button>
        )}
      </div>
    )}
  </div>
);
}


